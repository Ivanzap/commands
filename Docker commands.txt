  Основные понятия:
  
  -- Docker-Deamon - сервис, через который осуществляется все взаисодействие с контейнерами: создание и удаление, запуск и остановка
  
  -- Docker-client - это интерфейс командной строки для управления docker-deamon.
  
  -- Docker-Image - образ linux. Это шаблон содержащий инструкции по созданию контейнера Docker. Часто основывается на другом изображении.
  
  -- Docker-Container - контейнер. Это исполняемый образ. Контейнеры можно создавать, запускать, останавливать, перемещать или удалять при помощи Docker API.
               - контейнер. Это изолированный процесс на вашем хост-компьютере, который иизолирован от всех других процессов на хост-компьютере.
               
  -- Volume - том. Это файловая система, которая расположена на хост-компьютере за пределами контейнеров.
            - Свойства томов:
              * средства для постоянного хранения информации.
              * самостоятельны и отделены от контейнеров
              * могут совместно использовать разные контейнеры
              * позволяют организвать эффективное чтение и запись данных
              * тома можно размещать на удаленных ресурсах
              * тома иожно шифровать
              * томам можно давать имена
              * контейнер может заблаговременно наполнить тома данными
              * тома удобны для тестирования
  
  -- Dockerfile - инструкция для сборки образа   
              
  -- Docker-compose - инструмент необходимый для работы с многоконтейнерными приложениями. При помощи файла с расширением yaml можно указать необходимые инструкции для развертвыания многоконтейнернолого приложения.
  
  Docker commands:
  
  -- docker login -u YOUR-USER-NAME - вход в Docker Hub из терминала, с последующим вводом пароля
                                    - YOUR-USER-NAME - имя пользователя на docker hub
  
  -- docker tag getting-started YOUR-USER-NAME/getting-started - команда, которая помечает локальный репозиторий с именем getting-started удаленным репозиторием с docker hub YOUR-USER-NAME/getting-started
                                                               - связывает локальное изображение (после tag) с репозиторием на docker hub (в конце)
                                                               - YOUR-USER-NAME - имя пользователя на docker hub
  -- docker tag java-docker:latest java-docker:v1.0.0 - создание образа на основе java-docker, но с новым тэгом v1.0.0

	-- docker build -t имя_образа . - сборка образа согласно Dockerfile'у, который лежит в корневой папке
                                  - -t - (tag) помечает образ придуманным названием
                                  - . - искать Dockerfile в текущем каталоге
	
	-- docker images - проверить список установленных контейнеров (скаченных образов)
    -- docker images | grep postgres - вывести образы с именем postgres
	
	-- docker scan имя_изображения - проверка изображения на уязвимости
	
	-- docker image history имя_изображения - посмотреть слои изображения 
    -- docker image history --no-trunc getting-started - получить полный вывод

	-- docker rmi имя_образа - удалить докер образ (если у образа есть контейнер, то он не удалится)
	-- docker rmi -f имя_образа - принудительно удалить образ
	-- docker image rm $(docker images -a -q) - удалить все локальные образы

	-- docker run имя_образа - создание контейнера из образа, а затем запуск контейнера
    -- docker run -d -p 80:80 docker/getting-started - -d - запустить контейнер в фоновом режиме
                                                     - -p - сопоставить порт хоста с портом в контейнере
                                                     - docker/getting-started - изображение для контейнера
                                                     - docker run -dp 80:80 docker/getting-started - аналогичная сокращенная команда
    -- docker run -dp 3000:3000 -v todo-db:/etc/todos getting-started - запустить контейнер приложение todo
                                                                      - -v - присвоить контейнеру том и смотнировать его в /etc/todos
    -- docker run -dp 3000:3000 -w /app -v ""%cd%":/app" node:12-alpine sh -c "yarn install && yarn run dev" - -w /app - устанавливает «рабочий каталог» или текущий каталог, из которого будет запускаться команда
                                                                                                             - -v ""%cd%":/app" - привязка, монтирует текущий каталог с хоста в контейнере в каталог /app
                                                                                                             - node:12-alpine - изображение для использования.
                                                                                                             - sh -c "yarn install && yarn run dev" - команда. Мы запускаем оболочку с помощью sh(у alpine нет bash) и запускаем yarn install для установки всех зависимостей, а затем запускаем yarn run dev 
    -- docker run -d --network имя_сети --network-alias mysql -v todo-mysql-data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=secret -e MYSQL_DATABASE=todos mysql:5.7 - --network имя_сети - соединение по сети "имя сети"
    -- docker run --rm -d -p 8080:8080 --name springboot-server java-docker - запуск контейнера на основе образа java-docker. Задать имя контейнеру как springboot-server
                                                                            - -rm - удалить контейнер после остановки
    -- docker run -it -p 1000:8000 --rm my_image - -it - используется для взаимодействия с контейнером через терминал

  -- docker create имя_образа - создание контейнера из образа
  
  -- docker start имя_контейнера - запуск контейнера  

	-- docker ps - вывод списка всех контейнеров
	-- docker ps -a - вывод работающих контейнеров
	-- docker ps -a --filter ancestor=имя_образа - получить список всех контейнеров, созданных из определенного образа
	-- docker ps -a -s - (-s) — это сокращение для --size. Он позволяет вывести размеры контейнеров
	
	-- docker stop $(docker ps -a -q) - остановка контейнера
	-- docker stop id_контейнера - остановка контейнера по его id

	-- docker rm $(docker ps -a -q) - удаление контейнера
	-- docker rm id_контейнера - удаление контейнера по id контейнера
	-- docker rm -f id_контейнера - остановка и удаление контейнера (-f - force)
	
	-- docker container prune - удалить все контейнеры

	-- docker pull имя_образа - скачивание образа из настроенного репозитория (docker hub)

	-- docker push - отправка образа в настроенный репозиторий (docker hub)
	-- docker push my_repo/my_image:my_tag
	
	-- docker volume create todo-db - создание тома с именем todo-db
	-- docker volume ls - посмотреть имеющиеся тома
	-- docker volume inspect todo-db - исследовать том с именем todo-db
	-- docker volume rm todo-db - удалить том с именем todo-db
	-- docker volume prune - удалить все тома, которые не используются контейнерами
	
	-- docker logs -f <container-id> - посмотреть логи контейнера
	
	-- docker network create имя-сети - создание сети
	
	-- docker exec -it <mysql-container-id> mysql -u root -p - подключение к контейнеру (в данном случае к приложению mysql) с базами данных
	-- docker exec -it <mysql-container-id> mysql -p todos - подключение к базе данных с именем todos, внутри этой базы можно работать с таблицами
	-- docker exec -it myapp /bin/sh - подсключение к контейнеру по его имени
	-- docker exec -it имя_контейнера bash - зайти в контейнер postgres
    -- psql -U <user_name> -h localhost -d <name_db> - зайти в бд
    -- \d - посмотреть таблицы
	
	-- docker system prune - команда для очистки ресурсов Docker
  -- docker system prune -a --volumes - удаляет все неиспользуемы образы (-a) и тома (--volumes)

  -----------------------------------------------------
	DOCKERFILE
	-----------------------------------------------------
		* MAINTAINER ФИО - добавить автора образа 
		* FROM — задаёт базовый (родительский) образ.
    * LABEL — описывает метаданные. Например — сведения о том, кто создал и поддерживает образ.
    * ENV — устанавливает постоянные переменные среды.
    * RUN — выполняет команду и создаёт слой образа. Используется для установки в контейнер пакетов.
    * COPY — копирует в контейнер файлы и папки.
    * ADD — копирует файлы и папки в контейнер, может распаковывать локальные .tar-файлы.
    * CMD — описывает команду с аргументами, которую нужно выполнить когда контейнер будет запущен. Аргументы могут быть переопределены при запуске контейнера. В файле может присутствовать лишь одна инструкция CMD.
    * WORKDIR — задаёт рабочую директорию для следующей инструкции.
    * ARG — задаёт переменные для передачи Docker во время сборки образа.
    * ENTRYPOINT — предоставляет команду с аргументами для вызова во время выполнения контейнера. Аргументы не переопределяются.
    * EXPOSE — указывает на необходимость открыть порт.
    * VOLUME — создаёт точку монтирования для работы с постоянным хранилищем.
		
  -----------------------------------------------------
	DOCKER COMPOSE
	-----------------------------------------------------
	
	-- docker-compose up -d	- запуск docker-compose.yaml файла из текущего каталога в фоновом режиме (-d)
                          - По умолчанию Docker Compose автоматически создает сеть(network) специально для стека приложений.
  
  -- docker-compose down - остановка многоконтейнерного приложения, удаление сети. Без удаления томов.
    -- docker-compose down --volumes - docker-compose down с удалением томов.
 
  -- docker-compose logs -f - просмотр логов (-f - в реальном времени)
  -- docker-compose logs -f имя_сервиса - посмотреть лог конкретного сервиса
		


  # $(pwd) в Linux = "%cd%" в Windows
			

